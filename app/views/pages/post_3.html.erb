<!-- Page Header -->
<!-- Set your background image for this header on the line below. -->
<header class="intro-header" style="background-color: rgb(48, 10, 36);">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1 style="text-shadow: 2px 2px 2px black">Continual learning with i3 and vim</h1>
                    <h2 class="subheading"style="text-shadow: 2px 2px 2px black">Drying up programming workflow day by day</h2>
                    <span class="meta"style="text-shadow: 2px 2px 2px black">Posted by <a href="#">Kyle White</a> on April 15th, 2015</span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

<br><br>


i3 and Vim both significantly increase my productivity at a PC<br><br>

i3 is a tiling window manager, not to be confused with a desktop such as Gnome, Mate or Cinnamon. <br><br>

In essence, it removes the necessity to resize and reposition the windows that I work with. i3 just knows how to resize every terminal and browser window quickly and efficiently, leaving me more time to spend being productive and allowing me to capitalize on every inch of screen space without micro-managing.<br><br> 

There is some initial setup required though. For example, it really pays off to take the time to configure gaps. 'Gaps' refers to the space between each of the windows. Without gaps, the setup almost feels claustrophobic, like you are locked in place and have less control of your system. With Gaps, I feel like I have more control and a lot of the repositioning legwork is just taken care of for me.<br><br>


Vim is a text editor. When I first began programming, Sublime text was the recommended text editor for starting with development. The longer I stuck around the community though, the more I heard vim and emacs being tossed around. And while I haven't gotten around to Emacs yet, Vim has been fantastic.<br><br>

What sepereates vim from Sublime is that vim is a terminal text editor. I never have to leave the terminal to make an edit to specific files. Working with a file is as easy as typing vim foo.txt and getting to work. Then when the changes are complete and I exit the file I am right back at the command line to transistion to another file or task. I'm even using vim to type up this post right now. <br><br>



So why am I talking about a text editor and a window manager in the same post?<br><br>

Continual improvement.<br><br>

Both i3 and vim have extreme flexibilty and almost endless features. Much like git. The only difference that I haven't had a need to dig really deep into git yet and have been able to get by on basic, merge, push, pull, commit, log, branch commands. And on top of that, git hasn't directly influenced my productivity in the same way even though it has saved my butt a few time with its more complex features.<br><br>

Each day I allow myself to dig a little deeper with vim and i3. I can't sit and read through the whole manuel. It would take forever. What I can do is think, hey, I wonder how I do that, and look it up and, what do you know, it already exists so I implement it into my workflow. <br><br>

So far I have been speaking in more general terms so let's get down to 'for instance'. <br><br>

As a starting point with vim, it can be helpful to leave a colored overlay of the vim keyboard shortcuts up on the screen and then reference it when a process seems to be repetitive.<br><br>

Thats really what is going on here. Have you heard of DRY? It's somewhat of a mantra in the Ruby programming community. Dry stands for Don't Repeat Yourself. And while that is usually refering to the code that is being written. With i3 and Vim I am talking about drying up my workflow.<br><br>

Couple more points on vim. type vim a.txt b.txt to open multiple files and :p, :next to page through them. <br><br>

The real power in vim comes in writing your own vim commands to take over switching between common files. Similar to aliasing in bash.<br><br>


For i3. Take this example. Just today, I booted into my Linux Mint OS with i3 and got all set up to start working. Then I realized, wait a minute. I use this set up a lot but not every time.<br><br>

Now, the default config file from the tutorial mentioned below does list out pretty explicitly where you can set default applications to open any time you boot up i3, but, after a quick googling, I found that i3 also allows for layout saving. So I can actually generate a JSON printout and then feed that back into i3 later to open up my exact layout. <br><br>



What I am trying to get at is that these technologies have been very helpful for me and each little bit I learn improves my work output but I can't learn it all at once. So give em a go! And when you find yourself repeating a process in your workflow, see if there is already a way to streamline it! A refactoring of sorts.  





            </div>
        </div>
    </div>
</article>
